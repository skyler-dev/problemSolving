// https://school.programmers.co.kr/learn/courses/30/lessons/12938
/**
 * [문제 설명]
 * 자연수 n 개로 이루어진 중복 집합(multi set, 편의상 이후에는 "집합"으로 통칭) 중에 다음 두 조건을 만족하는 집합을 최고의 집합이라고 합니다.
 * 1. 각 원소의 합이 S가 되는 수의 집합
 * 2. 위 조건을 만족하면서 각 원소의 곱 이 최대가 되는 집합
 * 예를 들어서 자연수 2개로 이루어진 집합 중 합이 9가 되는 집합은 다음과 같이 4개가 있습니다.
 * { 1, 8 }, { 2, 7 }, { 3, 6 }, { 4, 5 }
 * 그중 각 원소의 곱이 최대인 { 4, 5 }가 최고의 집합입니다.
 * 집합의 원소의 개수 n과 모든 원소들의 합 s가 매개변수로 주어질 때, 최고의 집합을 return 하는 solution 함수를 완성해주세요.
 * 
 * [제한사항]
 * 최고의 집합은 오름차순으로 정렬된 1차원 배열(list, vector) 로 return 해주세요.
 * 만약 최고의 집합이 존재하지 않는 경우에 크기가 1인 1차원 배열(list, vector) 에 -1 을 채워서 return 해주세요.
 * 자연수의 개수 n은 1 이상 10,000 이하의 자연수입니다.
 * 모든 원소들의 합 s는 1 이상, 100,000,000 이하의 자연수입니다.
 */

// 수학

// 1. 합 s 
//      -> s < n 이면, 자연수로 만들 수 없는 s 이므로 [-1] 반환
// 2. 각 원소의 곱이 최대
//      -> 최대한 평탄한 자연수 N개 필요

function solution(n, s) {
    // 자연수로 만들 수 없는 s
    if(s < n) return [-1];
    
    const seedNum = Math.floor(s / n);
    const result = Array(n).fill(seedNum); // 씨드 숫자들로 초기화
    
    if(seedNum * n === s){ // 나누어 떨어졌다면?
        return result;
    } else { // 나누어 떨어지지 않았다면?
        let rest = s - seedNum * n;
        let idx = result.length - 1; // 마지막 원소부터 시작(오름차순을 위함)
        
        // 남은 숫자들 모두 분배
        while(rest !== 0){
            rest -= 1; // 빼서
            result[idx] += 1; // 넣어주고
            idx -= 1; // 다음 인덱스 준비
        }
        return result;
    }
}

// 정확성  테스트
// 테스트 1 〉	통과 (0.24ms, 36.9MB)
// 테스트 2 〉	통과 (0.46ms, 36.8MB)
// 테스트 3 〉	통과 (0.22ms, 36.8MB)
// 테스트 4 〉	통과 (0.17ms, 36.7MB)
// 테스트 5 〉	통과 (0.23ms, 32.7MB)
// 테스트 6 〉	통과 (0.20ms, 32.9MB)
// 테스트 7 〉	통과 (0.27ms, 33.4MB)
// 테스트 8 〉	통과 (0.16ms, 33.5MB)
// 테스트 9 〉	통과 (0.30ms, 36.9MB)
// 테스트 10 〉	통과 (0.21ms, 37.2MB)
// 테스트 11 〉	통과 (0.45ms, 36.8MB)
// 테스트 12 〉	통과 (0.39ms, 36.9MB)
// 테스트 13 〉	통과 (0.28ms, 37.1MB)
// 테스트 14 〉	통과 (0.07ms, 33.4MB)
// 효율성  테스트
// 테스트 1 〉	통과 (0.22ms, 36.5MB)
// 테스트 2 〉	통과 (0.24ms, 36.4MB)
// 테스트 3 〉	통과 (0.29ms, 36.3MB)
// 테스트 4 〉	통과 (0.27ms, 36.6MB)
// 테스트 5 〉	통과 (0.31ms, 36.8MB)
// 테스트 6 〉	통과 (0.07ms, 32.9MB)