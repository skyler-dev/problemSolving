// https://school.programmers.co.kr/learn/courses/30/lessons/12899
/**
 * 124 나라가 있습니다. 124 나라에서는 10진법이 아닌 다음과 같은 자신들만의 규칙으로 수를 표현합니다.
 * 1. 124 나라에는 자연수만 존재합니다.
 * 2. 124 나라에는 모든 수를 표현할 때 1, 2, 4만 사용합니다.
 * 자연수 n이 매개변수로 주어질 때, n을 124 나라에서 사용하는 숫자로 바꾼 값을 return 하도록 solution 함수를 완성해 주세요.
 * 예를 들어서 124 나라에서 사용하는 숫자는 다음과 같이 변환됩니다.
 * 10진법	124 나라	10진법	124 나라
    1	       1	       6	    14
    2	       2	       7	    21
    3	       4	       8	    22
    4	      11	       9	    24
    5	      12	      10	    41
 */

// GOOD
function solution(n) {
    let tmp = n; // 1 이상의 자연수
    let result = '';
    // 1,2,4란 세가지 숫자를 사용하므로 3진법 활용
    // 3진법에서는 1,2,0으로 표현된다. 다만, 0일 경우는 앞자리에 +1하는 작업이 동반된다.
    while(tmp>0){
        let rest = tmp%3; // 나머지
        tmp = Math.floor(tmp/3); // 몫
        if(rest===0){
            result = '4'+result;
            tmp--;
        }else{
            result = `${rest}`+result;
        }
    }
    return result;
}
// 정확성  테스트
// 테스트 1 〉	통과 (0.06ms, 33.6MB)
// 테스트 2 〉	통과 (0.06ms, 33.6MB)
// 테스트 3 〉	통과 (0.06ms, 33.5MB)
// 테스트 4 〉	통과 (0.07ms, 33.5MB)
// 테스트 5 〉	통과 (0.06ms, 33.4MB)
// 테스트 6 〉	통과 (0.06ms, 33.6MB)
// 테스트 7 〉	통과 (0.07ms, 33.5MB)
// 테스트 8 〉	통과 (0.07ms, 33.5MB)
// 테스트 9 〉	통과 (0.05ms, 33.7MB)
// 테스트 10 〉	통과 (0.05ms, 33.5MB)
// 테스트 11 〉	통과 (0.04ms, 33.6MB)
// 테스트 12 〉	통과 (0.05ms, 33.6MB)
// 테스트 13 〉	통과 (0.18ms, 33.6MB)
// 테스트 14 〉	통과 (0.11ms, 33.5MB)
// 효율성  테스트
// 테스트 1 〉	통과 (0.12ms, 33.3MB)
// 테스트 2 〉	통과 (0.12ms, 33.3MB)
// 테스트 3 〉	통과 (0.11ms, 33MB)
// 테스트 4 〉	통과 (0.12ms, 33.4MB)
// 테스트 5 〉	통과 (0.11ms, 33.4MB)
// 테스트 6 〉	통과 (0.12ms, 33.5MB)

// BAD
// 아래는 새로운 접근을 생각해보고 싶어서 시도한 흔적입니다.
// 정확성 테스트는 통과하고 효율성테스트는 시간초과가 뜹니다.
// 이유 : 제한사항 중 n은 50,000,000이하의 자연수 입니다.
// 1부터 n까지의 모든 수를 미리 계산해 놓았기 때문인 것 같습니다.
// n을 구하는 데 필요한 수만 계산하는 방식으로 개선이  가능할 것 같습니다.
// function solution(n) {
//     // 1은 '1', 
//     // 4는 '11', 3+1로 볼 때 3의 1승 더하기 1
//     // 13은 '111' 9+4로 볼 때 3의 2승 더하기 4
//     // 40은 '1111' 27+13로 볼 때 3의 3승 더하기 13
//     // 규칙성이 있으니까 dp로 풀 수 있지 않을 까?
//     // 인덱스를 10진법수로 볼 때,
//     const dp = Array.from({length: n+1}, ()=>''); 
//     dp[1]='1';
//     dp[2]='2';
//     dp[3]='4';
//     for(let i=4 ; i<=n ; i++){
//         if(i%3===0){
//             dp[i] = dp[Math.floor(i/3)-1] + dp[3];
//             continue;
//         }
//         dp[i] = dp[Math.floor(i/3)] + dp[i%3];
//     }
//     return dp[n]
// }
// 정확성  테스트
// 테스트 1 〉	통과 (0.08ms, 33.5MB)
// 테스트 2 〉	통과 (0.09ms, 33.5MB)
// 테스트 3 〉	통과 (0.21ms, 33.4MB)
// 테스트 4 〉	통과 (0.25ms, 33.5MB)
// 테스트 5 〉	통과 (0.20ms, 33.4MB)
// 테스트 6 〉	통과 (0.19ms, 33.4MB)
// 테스트 7 〉	통과 (0.64ms, 33.6MB)
// 테스트 8 〉	통과 (0.55ms, 33.7MB)
// 테스트 9 〉	통과 (4.41ms, 37MB)
// 테스트 10 〉	통과 (4.30ms, 37.2MB)
// 테스트 11 〉	통과 (5.20ms, 37.4MB)
// 테스트 12 〉	통과 (12.86ms, 39.3MB)
// 테스트 13 〉	통과 (75.83ms, 57.1MB)
// 테스트 14 〉	통과 (231.29ms, 97.7MB)
// 효율성  테스트
// 테스트 1 〉	실패 (시간 초과)
// 테스트 2 〉	실패 (시간 초과)
// 테스트 3 〉	실패 (시간 초과)
// 테스트 4 〉	실패 (시간 초과)
// 테스트 5 〉	실패 (시간 초과)
// 테스트 6 〉	실패 (시간 초과)