// https://school.programmers.co.kr/learn/courses/30/lessons/43238
/**
 * n명이 입국심사를 위해 줄을 서서 기다리고 있습니다. 각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.
 * 처음에 모든 심사대는 비어있습니다. 한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다. 가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다. 하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.
 * 모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.
 * 입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때, 모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.
 */

/**
 * 제한사항
 * * 입국심사를 기다리는 사람은 1명 이상 1,000,000,000명 이하입니다.
 * * 각 심사관이 한 명을 심사하는데 걸리는 시간은 1분 이상 1,000,000,000분 이하입니다.
 * * 심사관은 1명 이상 100,000명 이하입니다.
 */


// 특정 값을 찾는 것이 아니다.
// 최소 몇 분에 모든 심사가 끝나는가? (조건에 맞는 값을 찾아나가는 것)
// 그러므로 걸리는 시간의 최솟값(left)을 리턴

// 답은 최소 1분 ~ 10억분 * n 사이
// 알아야 하는 것 : 면접관들이 몇 명을 처리하는 가?
// ㄴ처리 가능한 입국자의 수(sum)가 n보다 작다면, left을 올려야 하고,
// ㄴ처리 가능한 입국자의 수(sum)가 n보다 크다면, right을 낮춰야 한다.
// 면접관이 시간 대비 몇 명을 처리할 수 있는 가?
// ㄴ mid / 심사관 별 심사시간 = 심사관 당 처리가능한 입국자 수

function solution(n, times) {
    const sortedTimes = times.sort((a, b)=> a - b); // O(n log n)
    // 처리에 걸리는 가장 짧은 시간(1분)
    let left = 1; 
    // 처리에 걸리는 가장 오래 걸리는 시간(모두가 최악의 심사관을 만나게 됨)
    let right = sortedTimes[sortedTimes.length - 1] * n;

    while(left <= right){
        // 우리가 확인해 볼 임의의 시간
        let mid = Math.floor((left+right) / 2);
        // mid분 안에 각 심사관이 처리할 수 있는 사람의 수의 합
        const sum = times.reduce((acc, cur)=> acc + Math.floor(mid / cur), 0);

        if(sum < n) {
            // 더 많은 시간 확보가 필요하다!
            left = mid + 1;
        } else {
            // 같을 때도, 더 적은 시간으로도 가능하지 않을 까?
            right = mid - 1;
        }
    }

    return left;
}
/**
 * n = 6, times = [7, 10] 의 입출력 예시의 경우입니다.
 * 1차 루프 : left = 1, right = 60 mid = 30, sum = 7
 * 2차 루프 : left = 1, right = 29, mid = 15, sum = 3
 * 3차 루프 : left = 16, right = 29, mid = 22, sum = 5
 * 4차 루프 : left = 23, right = 29, mid = 26, sum = 5
 * 5차 루프 : left = 27, right = 29, mid = 28, sum = 6
 * 6차 루프 : left = 27, right = 28, mid = 27, sum = 5
 * 7차 루프 : left = 28, right = 28, mid = 28, sum = 6
 * 8차 루프 : left = 28, right = 27 반복문이 종료되어 left 값을 반환함
 */

// 정확성  테스트
// 테스트 1 〉	통과 (0.16ms, 33.4MB)
// 테스트 2 〉	통과 (0.29ms, 33.5MB)
// 테스트 3 〉	통과 (17.93ms, 37.3MB)
// 테스트 4 〉	통과 (154.65ms, 43.4MB)
// 테스트 5 〉	통과 (142.14ms, 43.4MB)
// 테스트 6 〉	통과 (119.95ms, 42.6MB)
// 테스트 7 〉	통과 (163.98ms, 43.4MB)
// 테스트 8 〉	통과 (143.29ms, 43.5MB)
// 테스트 9 〉	통과 (0.19ms, 33.5MB)