// https://school.programmers.co.kr/learn/courses/30/lessons/12914
/**
 * 효진이는 멀리 뛰기를 연습하고 있습니다. 효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다. 칸이 총 4개 있을 때, 효진이는
 * (1칸, 1칸, 1칸, 1칸)
 * (1칸, 2칸, 1칸)
 * (1칸, 1칸, 2칸)
 * (2칸, 1칸, 1칸)
 * (2칸, 2칸)
 * 의 5가지 방법으로 맨 끝 칸에 도달할 수 있습니다. 멀리뛰기에 사용될 칸의 수 n이 주어질 때, 효진이가 끝에 도달하는 방법이 몇 가지인지 알아내, 여기에 1234567를 나눈 나머지를 리턴하는 함수, solution을 완성하세요. 예를 들어 4가 입력된다면, 5를 return하면 됩니다.
 */

function solution(n) {
    // f(n) = f(n-1) + f(n-2)
    // 만약 n=5라면, 5의 방법들 = 4의 방법들의 끝에 1을 추가한 것 + 3의 방법들에 끝에 2를 추가한 것
    // 갯수를 구하는 것이니까, 5의 방법 갯수 = 4의 방법 갯수 + 3의 방법 갯수
    
    // 피보나치
    const dp = new Array(n+1).fill(0);
    dp[1] = 1;
    dp[2] = 2;
    for(let i = 3 ; i <= n ; i++){
        dp[i] = (dp[i-1] + dp[i-2]) % 1234567;
    }
    return dp[n];
}
