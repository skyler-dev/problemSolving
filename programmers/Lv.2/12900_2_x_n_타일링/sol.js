// https://school.programmers.co.kr/learn/courses/30/lessons/12900
/**
 * 가로 길이가 2이고 세로의 길이가 1인 직사각형모양의 타일이 있습니다. 이 직사각형 타일을 이용하여 세로의 길이가 2이고 가로의 길이가 n인 바닥을 가득 채우려고 합니다. 타일을 채울 때는 다음과 같이 2가지 방법이 있습니다.
 * * 타일을 가로로 배치 하는 경우
 * * 타일을 세로로 배치 하는 경우
 * 예를들어서 n이 7인 직사각형은 다음과 같이 채울 수 있습니다.
 * (그림)
 * 직사각형의 가로의 길이 n이 매개변수로 주어질 때, 이 직사각형을 채우는 방법의 수를 return 하는 solution 함수를 완성해주세요.
 */

/**
 * 제한사항
 * * 가로의 길이 n은 60,000이하의 자연수 입니다.
 * * 경우의 수가 많아 질 수 있으므로, 경우의 수를 1,000,000,007으로 나눈 나머지를 return해주세요.
 */

function solution(n) {
    // 피보나치
    const dp = new Array(n+1).fill(0);
    dp[1] = 1;
    dp[2] = 2;
    for(let i = 3 ; i<=n ; i++){
        dp[i] = (dp[i-1] + dp[i-2]) % 1000000007;
    }
    return dp[n];
}
// 정확성  테스트
// 테스트 1 〉	통과 (0.44ms, 33.6MB)
// 테스트 2 〉	통과 (0.19ms, 33.4MB)
// 테스트 3 〉	통과 (0.38ms, 33.5MB)
// 테스트 4 〉	통과 (0.58ms, 33.4MB)
// 테스트 5 〉	통과 (0.17ms, 33.4MB)
// 테스트 6 〉	통과 (0.48ms, 33.3MB)
// 테스트 7 〉	통과 (0.18ms, 33.6MB)
// 테스트 8 〉	통과 (0.49ms, 33.4MB)
// 테스트 9 〉	통과 (0.68ms, 33.5MB)
// 테스트 10 〉	통과 (0.62ms, 33.5MB)
// 테스트 11 〉	통과 (0.35ms, 33.5MB)
// 테스트 12 〉	통과 (0.18ms, 33.4MB)
// 테스트 13 〉	통과 (0.22ms, 33.5MB)
// 테스트 14 〉	통과 (0.34ms, 33.5MB)
// 효율성  테스트
// 테스트 1 〉	통과 (2.02ms, 36.7MB)
// 테스트 2 〉	통과 (2.10ms, 36.6MB)
// 테스트 3 〉	통과 (1.99ms, 36.6MB)
// 테스트 4 〉	통과 (1.91ms, 36.5MB)
// 테스트 5 〉	통과 (2.49ms, 36.7MB)
// 테스트 6 〉	통과 (2.36ms, 36.9MB)

// 특정 로직을 사용하여 초기화하는 것이 아니고,
// 많은 값을 같은 값으로 초기화할 경우 fill을 사용하기
function solution(n) {
    // 피보나치
    const dp = Array.from({length:n+1}, ()=>0);
    dp[1] = 1;
    dp[2] = 2;
    for(let i = 3 ; i<=n ; i++){
        dp[i] = (dp[i-1] + dp[i-2]) % 1000000007;
    }
    return dp[n];
}

// 정확성  테스트
// 테스트 1 〉	통과 (1.05ms, 33.5MB)
// 테스트 2 〉	통과 (0.46ms, 33.5MB)
// 테스트 3 〉	통과 (0.74ms, 33.5MB)
// 테스트 4 〉	통과 (1.18ms, 33.5MB)
// 테스트 5 〉	통과 (0.28ms, 33.4MB)
// 테스트 6 〉	통과 (1.96ms, 33.5MB)
// 테스트 7 〉	통과 (0.45ms, 33.5MB)
// 테스트 8 〉	통과 (1.70ms, 33.4MB)
// 테스트 9 〉	통과 (0.88ms, 33.5MB)
// 테스트 10 〉	통과 (1.30ms, 33.5MB)
// 테스트 11 〉	통과 (0.70ms, 33.5MB)
// 테스트 12 〉	통과 (0.53ms, 33.4MB)
// 테스트 13 〉	통과 (0.39ms, 33.5MB)
// 테스트 14 〉	통과 (0.68ms, 33.5MB)
// 효율성  테스트
// 테스트 1 〉	통과 (3.56ms, 36.8MB)
// 테스트 2 〉	통과 (5.30ms, 36.6MB)
// 테스트 3 〉	통과 (3.30ms, 36.7MB)
// 테스트 4 〉	통과 (2.87ms, 36.6MB)
// 테스트 5 〉	통과 (5.00ms, 36.8MB)
// 테스트 6 〉	통과 (6.29ms, 36.6MB)

