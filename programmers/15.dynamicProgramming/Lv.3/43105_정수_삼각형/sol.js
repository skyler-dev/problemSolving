// https://school.programmers.co.kr/learn/courses/30/lessons/43105
/**
 * [문제 설명]
 * (이미지)
 * 위와 같은 삼각형의 꼭대기에서 바닥까지 이어지는 경로 중, 거쳐간 숫자의 합이 가장 큰 경우를 찾아보려고 합니다. 아래 칸으로 이동할 때는 대각선 방향으로 한 칸 오른쪽 또는 왼쪽으로만 이동 가능합니다. 예를 들어 3에서는 그 아래칸의 8 또는 1로만 이동이 가능합니다.
 * 삼각형의 정보가 담긴 배열 triangle이 매개변수로 주어질 때, 거쳐간 숫자의 최댓값을 return 하도록 solution 함수를 완성하세요.
 * 
 * [제한사항]
 * 삼각형의 높이는 1 이상 500 이하입니다.
 * 삼각형을 이루고 있는 숫자는 0 이상 9,999 이하의 정수입니다.
 */

// dp
// tabulation : 모든 하위 문제를 적어도 한번은 해결해야 하는 경우

function solution(triangle) {
    // 삼각형을 이루고 있는 숫자는 0과 양수이므로 0으로 dp 초기화
    const N = triangle.length;
    const dp = Array.from(Array(N - 1), (_,i)=>Array(i+1).fill(0));
    // 삼각형 밑변 그대로 활용(불변성 유지)
    const seeds = [...triangle[N - 1]];
    dp.push(seeds);

    // 삼각형의 밑변 부터 계산하며 쌓아올리기
    for(let i = N - 2 ; i >= 0 ; i -= 1){
        // 정삼각형이므로 j는 i만큼만 순회
        for(let j = i ; j >= 0 ; j -= 1){
            // 현재 값 + 가장 큰 값들을 합해온 값
            const sum = triangle[i][j] + Math.max(dp[i + 1][j], dp[i + 1][j + 1]);
            dp[i][j] = sum;
        }
    }
    
    return dp[0][0];
}

// 정확성  테스트
// 테스트 1 〉	통과 (0.15ms, 33.5MB)
// 테스트 2 〉	통과 (0.19ms, 33.6MB)
// 테스트 3 〉	통과 (0.20ms, 33.5MB)
// 테스트 4 〉	통과 (0.26ms, 33.5MB)
// 테스트 5 〉	통과 (1.12ms, 33.5MB)
// 테스트 6 〉	통과 (0.29ms, 33.5MB)
// 테스트 7 〉	통과 (0.96ms, 33.5MB)
// 테스트 8 〉	통과 (0.30ms, 33.5MB)
// 테스트 9 〉	통과 (0.18ms, 33.4MB)
// 테스트 10 〉	통과 (0.42ms, 33.4MB)
// 효율성  테스트
// 테스트 1 〉	통과 (4.78ms, 41.2MB)
// 테스트 2 〉	통과 (4.62ms, 40.2MB)
// 테스트 3 〉	통과 (5.29ms, 42MB)
// 테스트 4 〉	통과 (4.83ms, 41.3MB)
// 테스트 5 〉	통과 (5.02ms, 40.9MB)
// 테스트 6 〉	통과 (5.65ms, 42MB)
// 테스트 7 〉	통과 (4.99ms, 41.6MB)
// 테스트 8 〉	통과 (4.64ms, 40.6MB)
// 테스트 9 〉	통과 (4.97ms, 40.9MB)
// 테스트 10 〉	통과 (5.00ms, 41.7MB)