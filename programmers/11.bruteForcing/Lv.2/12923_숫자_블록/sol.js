// https://school.programmers.co.kr/learn/courses/30/lessons/12923

/**
 * [문제 설명]
 * 그렙시에는 숫자 0이 적힌 블록들이 설치된 도로에 다른 숫자가 적힌 블록들을 설치하기로 하였습니다. 숫자 블록을 설치하는 규칙은 다음과 같습니다.
 * 블록에 적힌 번호가 n 일 때, 가장 첫 블록은 n * 2번째 위치에 설치합니다. 그 다음은 n * 3, 그 다음은 n * 4, ...위치에 설치합니다. 기존에 설치된 블록은 빼고 새로운 블록을 집어넣습니다.
 * 블록은 1이 적힌 블록부터 숫자를 1씩 증가시키며 순서대로 설치합니다. 예를 들어 1이 적힌 블록은 2, 3, 4, 5, ... 인 위치에 우선 설치합니다. 그 다음 2가 적힌 블록은 4, 6, 8, 10, ... 인 위치에 설치하고, 3이 적힌 블록은 6, 9, 12... 인 위치에 설치합니다.
 * 이렇게 3이 적힌 블록까지 설치하고 나면 첫 10개의 블록에 적힌 번호는 [0, 1, 1, 2, 1, 3, 1, 2, 3, 2]가 됩니다.
 * 그렙시는 길이가 1,000,000,000인 도로에 1부터 10,000,000까지의 숫자가 적힌 블록들을 이용해 위의 규칙대로 모두 설치 했습니다.
 * 그렙시의 시장님은 특정 구간에 어떤 블록이 깔려 있는지 알고 싶습니다.
 * 구간을 나타내는 두 정수 begin, end 가 매개변수로 주어 질 때, 그 구간에 깔려 있는 블록의 숫자 배열을 return하는 solution 함수를 완성해 주세요.
 * 
 * [제한 사항]
 * 1 ≤ begin ≤ end ≤ 1,000,000,000
 * end - begin ≤ 5,000
 */

// 소수, 약수

// 구간의 위치가 1이라면, 블록의 숫자는 0
// 구간의 위치가 소수라면, 블록의 숫자는 1
// 그렇지 않다면, 블록의 숫자는 "위치의 약수 중 가장 큰 숫자"(10,000,000이하)

function solution(begin, end) {
    const table = [];
    
    for(let num = begin ; num <= end ; num++){
        if(num === 1){
            table.push(0);
            continue;
        }
        table.push(getLimitDiver(num))
    }
    
    return table;
}

function getLimitDiver(num) {
    let limitN = 1; // 소수 일 경우를 위해 1로 초기화
    
    for(let i = 2 ; i * i <= num ; i += 1){
        if(num % i === 0){
            // 짝궁 숫자가 놓여질 블록일 때
            if(num / i <= 10000000) return num / i;
            else limitN = i; // i가 놓여질 블록이 될 수도 있으므로 갱신해놓기
        }
    }
    return limitN;
}

// 정확성  테스트
// 테스트 1 〉	통과 (0.18ms, 33.7MB)
// 테스트 2 〉	통과 (0.18ms, 33.6MB)
// 테스트 3 〉	통과 (0.19ms, 33.5MB)
// 테스트 4 〉	통과 (0.16ms, 33.5MB)
// 테스트 5 〉	통과 (0.14ms, 33.6MB)
// 테스트 6 〉	통과 (0.26ms, 33.5MB)
// 테스트 7 〉	통과 (0.15ms, 33.5MB)
// 테스트 8 〉	통과 (0.16ms, 33.6MB)
// 테스트 9 〉	통과 (0.24ms, 33.6MB)
// 테스트 10 〉	통과 (0.20ms, 33.6MB)
// 테스트 11 〉	통과 (0.15ms, 33.6MB)
// 테스트 12 〉	통과 (0.16ms, 33.6MB)
// 테스트 13 〉	통과 (0.24ms, 33.5MB)
// 테스트 14 〉	통과 (0.30ms, 33.5MB)
// 테스트 15 〉	통과 (0.14ms, 33.6MB)
// 효율성  테스트
// 테스트 1 〉	통과 (64.99ms, 36.9MB)
// 테스트 2 〉	통과 (87.76ms, 36.9MB)
// 테스트 3 〉	통과 (107.77ms, 37MB)
// 테스트 4 〉	통과 (163.51ms, 36.9MB)
// 테스트 5 〉	통과 (139.87ms, 37.5MB)
// 테스트 6 〉	통과 (131.42ms, 36.9MB)